{"version":3,"file":"progressbar.min.js","sources":["../src/progressbar.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Completion Progress block progress bar behaviour.\r\n *\r\n * @module     block_completion_progress/progressbar\r\n * @copyright  2020 Jonathon Fowler <fowlerj@usq.edu.au>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\ndefine(['jquery', 'core/pubsub', 'core/utils'],\r\n    function($, PubSub, Utils) {\r\n        /**\r\n         * Show progress event information for a cell.\r\n         * @param {Event} event\r\n         */\r\n        function showInfo(event) {\r\n            var cell = $(this);\r\n            var container = cell.closest('.block_completion_progress .barContainer');\r\n            var visibleinfo = container.siblings('.progressEventInfo:visible');\r\n            var infotoshow = container.siblings('#' + cell.data('infoRef'));\r\n\r\n            if (!visibleinfo.is(infotoshow)) {\r\n                visibleinfo.hide();\r\n                infotoshow.show();\r\n            }\r\n\r\n            event.preventDefault();\r\n        }\r\n\r\n        /**\r\n         * Hide progress event information for a cell.\r\n         * @param {Event} event\r\n         */\r\n        function hideInfo(event) {\r\n            var tableRow = $(this);\r\n            var cell = tableRow.find('.progressBarCell');\r\n            var container = cell.closest('.block_completion_progress .barContainer');\r\n            var visibleinfo = container.siblings('.progressEventInfo:visible');\r\n            visibleinfo.hide();\r\n            event.preventDefault();\r\n        }\r\n\r\n        /**\r\n         * Show all progress event information (for accessibility).\r\n         * @param {Event} event\r\n         */\r\n        function showAllInfo(event) {\r\n            var initialinfo = $(this).closest('.progressEventInfo');\r\n\r\n            initialinfo.siblings('.progressEventInfo').show();\r\n            initialinfo.hide();\r\n\r\n            event.preventDefault();\r\n        }\r\n\r\n        /**\r\n         * Navigate to a cell's activity location.\r\n         */\r\n        function viewActivity() {\r\n            var cell = $(this);\r\n            var container = cell.closest('.block_completion_progress .barContainer');\r\n            var infotoshow = container.siblings('#' + cell.data('infoRef'));\r\n            var infolink = infotoshow.find('a.action_link');\r\n            if (infolink.prop('onclick') !== null) {\r\n                infolink.click();\r\n            } else {\r\n                document.location = infolink.prop('href');\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Scroll the bar corresponding to the arrow clicked.\r\n         * @param {Event} event\r\n         */\r\n        function scrollContainer(event) {\r\n            var barrow = $(this).closest('.block_completion_progress .barContainer').find('.barRow');\r\n            var amount = event.data * barrow.prop('scrollWidth') * 0.15;\r\n\r\n            barrow.prop('scrollLeft', barrow.prop('scrollLeft') + amount);\r\n\r\n            event.preventDefault();\r\n        }\r\n\r\n        /**\r\n         * Show or hide the scroll arrows based on the visible position.\r\n         */\r\n        function checkArrows() {\r\n            var barrow = $(this);\r\n            var barcontainer = barrow.closest('.block_completion_progress .barContainer');\r\n            var leftarrow = barcontainer.find('.left-arrow-svg');\r\n            var rightarrow = barcontainer.find('.right-arrow-svg');\r\n            var scrolled = barrow.prop('scrollLeft');\r\n            var scrollWidth = barrow.prop('scrollWidth') - barrow.prop('offsetWidth');\r\n            var threshold = Math.floor(barrow.find('.progressBarCell:first-child').width() * 0.25);\r\n\r\n            if (document.dir === 'rtl') {\r\n                scrolled = -scrolled;\r\n\r\n                if (scrolled > threshold) {\r\n                    rightarrow.css('display', 'block');\r\n                } else {\r\n                    rightarrow.css('display', 'none');\r\n                }\r\n                if (scrollWidth > threshold && scrolled < scrollWidth - threshold) {\r\n                    leftarrow.css('display', 'block');\r\n                } else {\r\n                    leftarrow.css('display', 'none');\r\n                }\r\n            } else {\r\n                if (scrolled > threshold) {\r\n                    leftarrow.css('display', 'block');\r\n                } else {\r\n                    leftarrow.css('display', 'none');\r\n                }\r\n                if (scrollWidth > threshold && scrolled < scrollWidth - threshold) {\r\n                    rightarrow.css('display', 'block');\r\n                } else {\r\n                    rightarrow.css('display', 'none');\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Prepare scroll mode behaviour.\r\n         * @param {jQuery} barcontainers there could be many nodes here in overview mode\r\n         */\r\n        function setupScroll(barcontainers) {\r\n            var barrows = barcontainers.find('.barRow');\r\n\r\n            /**\r\n             * Check arrow visibility for each of the bar rows.\r\n             */\r\n            function checkEachBar() {\r\n                barrows.each(checkArrows);\r\n            }\r\n\r\n            barrows.scroll(checkArrows);\r\n            $(window).resize(checkEachBar);\r\n            PubSub.subscribe('nav-drawer-toggle-end', checkEachBar); // Boost ≤3.11.\r\n            $(document).on('theme_boost/drawers:shown theme_boost/drawers:hidden',\r\n                Utils.debounce(checkEachBar, 250)); // Boost ≥4.0.\r\n\r\n            // On page load, place the 'now' marker in the centre of the scrolled bar\r\n            // and adjust which arrows should be visible.\r\n            $(function() {\r\n                var nowicons = barcontainers.find('.nowicon');\r\n                nowicons.each(function() {\r\n                    var nowicon = $(this);\r\n                    var barrow = nowicon.closest('.block_completion_progress .barRow');\r\n\r\n                    barrow.prop('scrollLeft', 0);\r\n                    barrow.prop('scrollLeft', nowicon.offset().left - barrow.offset().left -\r\n                        barrow.width() / 2);\r\n                });\r\n\r\n                barrows.each(checkArrows);\r\n            });\r\n\r\n            barcontainers.on('click', '.left-arrow-svg', -1, scrollContainer);\r\n            barcontainers.on('click', '.right-arrow-svg', 1, scrollContainer);\r\n        }\r\n\r\n        /**\r\n         * Set up event handlers for a particular progress bar instance.\r\n         * @param {integer} instanceid the bar instance id\r\n         */\r\n        function initialiseBar(instanceid) {\r\n            var barcontainers = $('.block_completion_progress ' +\r\n                '.barContainer[data-instanceid=\"' + instanceid + '\"]');\r\n\r\n            // Show information elements on hover or tap.\r\n            barcontainers.on('touchstart mouseover', '.progressBarCell', showInfo);\r\n\r\n            // Hide additional information when hovering elsewhere\r\n            barcontainers.parents('tr').on('mouseleave touchcancel', hideInfo);\r\n\r\n            // Navigate to the activity when its cell is clicked.\r\n            barcontainers.on('click', '.progressBarCell[data-haslink=true]', viewActivity);\r\n\r\n            // Show all information elements when the 'show all' link is clicked.\r\n            barcontainers.siblings('.progressEventInfo').find('.progressShowAllInfo').click(showAllInfo);\r\n\r\n            setupScroll(barcontainers);\r\n        }\r\n\r\n        return /** @alias module:block_completion_progress/progressbar */ {\r\n            /**\r\n             * Initialise progress bar instances.\r\n             * @param {array} instanceids an array of progress bar instance ids\r\n             */\r\n            init: function(instanceids) {\r\n                for (var i = instanceids.length - 1; i >= 0; i--) {\r\n                    initialiseBar(instanceids[i]);\r\n                }\r\n            },\r\n        };\r\n    });\r\n"],"names":["define","$","PubSub","Utils","showInfo","event","cell","this","container","closest","visibleinfo","siblings","infotoshow","data","is","hide","show","preventDefault","hideInfo","find","showAllInfo","initialinfo","viewActivity","infolink","prop","click","document","location","scrollContainer","barrow","amount","checkArrows","barcontainer","leftarrow","rightarrow","scrolled","scrollWidth","threshold","Math","floor","width","dir","css","initialiseBar","instanceid","barcontainers","on","parents","barrows","checkEachBar","each","scroll","window","resize","subscribe","debounce","nowicon","offset","left","setupScroll","init","instanceids","i","length"],"mappings":"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"}